---
# Ansible Playbook: Docker Setup
# 用于在 Linux 服务器上安装和配置 Docker 及 Docker Compose

- name: Docker and Docker Compose Setup
  hosts: docker_hosts
  become: yes
  vars:
    docker_edition: "ce"
    docker_compose_version: "2.23.0"
    docker_users:
      - "{{ ansible_user }}"
    enable_docker_logging: true
    docker_log_max_size: "10m"
    docker_log_max_file: "3"
    
  tasks:
    - name: Remove old Docker versions
      apt:
        name:
          - docker
          - docker-engine
          - docker.io
          - containerd
          - runc
        state: absent
      when: ansible_os_family == "Debian"

    - name: Install dependencies (Debian/Ubuntu)
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Add Docker GPG key (Debian/Ubuntu)
      apt_key:
        url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Docker repository (Debian/Ubuntu)
      apt_repository:
        repo: >
          deb [arch=amd64]
          https://download.docker.com/linux/{{ ansible_distribution | lower }}
          {{ ansible_distribution_release }}
          stable
        state: present
      when: ansible_os_family == "Debian"

    - name: Install Docker (Debian/Ubuntu)
      apt:
        name:
          - docker-{{ docker_edition }}
          - docker-{{ docker_edition }}-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install dependencies (RedHat/CentOS)
      yum:
        name:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
        state: present
      when: ansible_os_family == "RedHat"

    - name: Add Docker repository (RedHat/CentOS)
      command: >
        yum-config-manager
        --add-repo
        https://download.docker.com/linux/centos/docker-ce.repo
      when: ansible_os_family == "RedHat"
      args:
        creates: /etc/yum.repos.d/docker-ce.repo

    - name: Install Docker (RedHat/CentOS)
      yum:
        name:
          - docker-{{ docker_edition }}
          - docker-{{ docker_edition }}-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
      when: ansible_os_family == "RedHat"

    - name: Create Docker configuration directory
      file:
        path: /etc/docker
        state: directory
        mode: '0755'

    - name: Configure Docker daemon
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "{{ docker_log_max_size }}",
              "max-file": "{{ docker_log_max_file }}"
            },
            "storage-driver": "overlay2",
            "live-restore": true,
            "userland-proxy": false,
            "metrics-addr": "127.0.0.1:9323",
            "experimental": false
          }
        mode: '0644'
      notify: Restart Docker

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Add users to docker group
      user:
        name: "{{ item }}"
        groups: docker
        append: yes
      loop: "{{ docker_users }}"
      when: docker_users is defined

    - name: Install Docker Compose standalone (backup method)
      get_url:
        url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-linux-x86_64"
        dest: /usr/local/bin/docker-compose
        mode: '0755'
      when: ansible_architecture == "x86_64"

    - name: Verify Docker installation
      command: docker --version
      register: docker_version
      changed_when: false

    - name: Verify Docker Compose installation
      command: docker compose version
      register: docker_compose_ver
      changed_when: false
      ignore_errors: yes

    - name: Pull common Docker images
      docker_image:
        name: "{{ item }}"
        source: pull
      loop:
        - alpine:latest
        - nginx:latest
        - redis:latest
      when: ansible_connection != 'local'
      ignore_errors: yes

    - name: Create Docker networks
      docker_network:
        name: "{{ item }}"
        driver: bridge
      loop:
        - app_network
        - monitoring_network
      ignore_errors: yes

    - name: Setup Docker cleanup cron job
      cron:
        name: "Docker system prune"
        minute: "0"
        hour: "2"
        job: "docker system prune -af --filter 'until=720h' > /dev/null 2>&1"
        state: present

    - name: Display installation information
      debug:
        msg:
          - "Docker installation completed successfully!"
          - "Docker version: {{ docker_version.stdout }}"
          - "Docker Compose version: {{ docker_compose_ver.stdout | default('Not available') }}"
          - "Docker users: {{ docker_users | join(', ') }}"
          - "Note: Users need to log out and back in for group changes to take effect"

  handlers:
    - name: Restart Docker
      systemd:
        name: docker
        state: restarted
        daemon_reload: yes
